# app/agents/vulnerability_scanner_crew.py
from crewai import Agent, Task, Crew, Process, LLM
from crewai.tools import BaseTool # << Quan trọng
from dotenv import load_dotenv
import os
import json
import requests
from urllib.parse import urlparse # Thêm import này
from langchain_openai import ChatOpenAI

# Import service quét và trình quản lý payload
from ..services.scanner_service import WebScannerService
from ..utils.payload_manager import load_payloads_for_service
# from ..utils.cwe_manager import get_cwe_info # LLM có thể không cần truy cập trực tiếp nếu prompt đủ tốt

# --- Tải biến môi trường và Khởi tạo LLM ---
load_dotenv()
deepseek_api_key = os.getenv("DEEPSEEK_API_KEY")
deepseek_api_base = os.getenv("DEEPSEEK_API_BASE")
DEEPSEEK_MODEL_FROM_ENV = os.getenv("DEEPSEEK_MODEL", "deepseek-chat")

deepseek_llm_instance = None
if deepseek_api_base and deepseek_api_key: # << Chỉ kiểm tra 2 biến này
    print("      DEEPSEEK_API_BASE và DEEPSEEK_API_KEY đã được cấu hình trong tệp .env của bạn.")
    print("      Sẽ sử dụng chúng để khởi tạo LLM.")
    LITELLM_DEEPSEEK_MODEL = f"deepseek/{DEEPSEEK_MODEL_FROM_ENV}" # << Model name cho LiteLLM
    deepseek_llm_instance = LLM( # << Sử dụng LLM của CrewAI
                model=LITELLM_DEEPSEEK_MODEL,
                api_key=deepseek_api_key,    # Truyền key vào đây
                api_base=deepseek_api_base,  # Truyền base vào đây
                temperature=0.7,
                context_window=128000,
                max_tokens=4096
            )
# ...
else:
    print("[LLM Init Crew Warning] DEEPSEEK_API_BASE hoặc DEEPSEEK_API_KEY không được tìm thấy trong .env.")
    print("                      LLM-based reporting agent sẽ không hoạt động hiệu quả.")\
    
# --- Tải Payloads (Một lần) ---
PROJECT_ROOT_AGENT = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..'))
PAYLOADS_DIR_FROM_ROOT_AGENT = "payloads"
payload_path_agent = os.path.join(PROJECT_ROOT_AGENT, PAYLOADS_DIR_FROM_ROOT_AGENT)
loaded_payload_data_agent = load_payloads_for_service(payload_path_agent)
payloads_sqli_global_agent = loaded_payload_data_agent.get("SQLi", {})
payloads_xss_global_agent = loaded_payload_data_agent.get("XSS", {})

# --- Khởi tạo Service Quét (sẽ được truyền vào Tools) ---
# num_threads của service này có thể được ghi đè bởi tham số từ tool
scanner_service_for_tools = WebScannerService(num_threads=10) 

# --- Định nghĩa Tools ---
class URLDiscoveryTool(BaseTool):
    name: str = "URL Parameter Discovery Tool"
    description: str = (
        "Khám phá các URL có tham số từ một initial_url. "
        "Yêu cầu 'initial_url' (string), 'crawl_enabled' (boolean), và 'max_crawl_urls' (integer) làm đầu vào."
    )
    # Không cần gán scanner_service ở đây nữa, sẽ truyền khi khởi tạo Tool instance

    def _run(self, initial_url: str, crawl_enabled: bool, max_crawl_urls: int) -> str:
        # Tool nên trả về string, có thể là JSON string của list
        print(f"  [URLDiscoveryTool] Running for: {initial_url}, Crawl: {crawl_enabled}, Max: {max_crawl_urls}")
        session = requests.Session()
        session.headers.update({'User-Agent': 'Mozilla/5.0 VulnScanner/1.1 CrewToolCrawler'})
        
        urls_found = []
        parsed_initial = urlparse(initial_url)
        if parsed_initial.query:
            urls_found.append(initial_url)
        
        if crawl_enabled:
            # Sử dụng instance service đã được truyền vào hoặc một instance toàn cục
            discovered = scanner_service_for_tools.discover_urls_with_params(
                initial_url, session, max_urls_to_check=max_crawl_urls, thread_id="ToolCrawler"
            )
            for d_url in discovered:
                if d_url not in urls_found:
                    urls_found.append(d_url)
        session.close()
        print(f"  [URLDiscoveryTool] Discovered URLs: {urls_found}")
        return json.dumps(urls_found) # Trả về JSON string

class VulnerabilityAnalysisTool(BaseTool):
    name: str = "Vulnerability Analysis Tool"
    description: str = (
        "Quét một danh sách các URL (dưới dạng JSON string) để tìm lỗ hổng SQLi và XSS. "
        "Yêu cầu 'urls_to_scan_json_str' (JSON string of a list of URLs), "
        "'skip_sqli' (boolean), 'skip_xss' (boolean), và 'num_threads' (integer) làm đầu vào."
    )

    def _run(self, urls_to_scan_json_str: str, skip_sqli: bool, skip_xss: bool, num_threads: int) -> str:
        # Tool nên trả về string, có thể là JSON string của list findings
        try:
            urls_to_scan = json.loads(urls_to_scan_json_str)
            if not isinstance(urls_to_scan, list):
                return json.dumps({"error": "Đầu vào urls_to_scan_json_str phải là một JSON array."})
        except json.JSONDecodeError:
            return json.dumps({"error": "Đầu vào urls_to_scan_json_str không phải là JSON hợp lệ."})

        print(f"  [VulnerabilityAnalysisTool] Running for {len(urls_to_scan)} URLs. Skip SQLi: {skip_sqli}, Skip XSS: {skip_xss}, Threads: {num_threads}")
        if not urls_to_scan:
            return json.dumps([]) # Trả về JSON array rỗng
        
        session = requests.Session() # Tool tạo session riêng
        session.headers.update({'User-Agent': 'Mozilla/5.0 VulnScanner/1.1 CrewToolScanner'})

        findings = scanner_service_for_tools.scan_multiple_urls(
            urls_to_scan,
            payloads_sqli_global_agent if not skip_sqli else {},
            payloads_xss_global_agent if not skip_xss else {},
            session_override=session,
            num_threads_override=num_threads
        )
        session.close()
        print(f"  [VulnerabilityAnalysisTool] Found {len(findings)} potential vulnerabilities.")
        return json.dumps(findings) # Trả về JSON string

# --- Định nghĩa Agents ---
url_discovery_agent = Agent(
    role='URL Discovery Specialist',
    goal='Khám phá các URL có tham số từ một URL đầu vào, nếu được yêu cầu crawling.',
    backstory="Là một chuyên gia phân tích cấu trúc web...",
    verbose=True, allow_delegation=False,
    llm=deepseek_llm_instance,
    tools=[URLDiscoveryTool()]
)

vulnerability_analysis_agent = Agent(
    role='Vulnerability Analyst',
    goal='Phân tích các URL được cung cấp để tìm kiếm lỗ hổng SQLi và XSS.',
    backstory="Với kinh nghiệm dày dặn trong kiểm thử xâm nhập...",
    verbose=True, allow_delegation=False,
    llm=deepseek_llm_instance,
    tools=[VulnerabilityAnalysisTool()]
)

reporting_agent = Agent(
    role='Security Report Summarizer',
    goal="Phân tích danh sách các lỗ hổng và tạo ra một bản tóm tắt dễ hiểu.",
    backstory="Bạn là một chuyên gia phân tích bảo mật...",
    llm=deepseek_llm_instance, verbose=True, allow_delegation=False,
)

# --- Định nghĩa Tasks ---
def create_tasks_for_crew(initial_url, crawl_enabled, max_crawl_urls, skip_sqli, skip_xss, num_threads):
    task_inputs = { # Đây sẽ là phần `inputs` cho `crew.kickoff()`
        'initial_url': initial_url,
        'crawl_enabled': crawl_enabled,
        'max_crawl_urls': max_crawl_urls,
        'skip_sqli': skip_sqli,
        'skip_xss': skip_xss,
        'num_threads': num_threads,
    }

    discover_task = Task(
        description=(
            f"Từ URL mục tiêu ban đầu '{initial_url}', sử dụng URL Parameter Discovery Tool để khám phá các URL có tham số. "
            f"Cài đặt crawling là '{crawl_enabled}' và số URL crawl tối đa là '{max_crawl_urls}'. "
            "Output của tool này sẽ là một JSON string chứa danh sách các URL."
        ),
        expected_output="Một JSON string đại diện cho một danh sách các URL. Ví dụ: '[\"http://example.com/page?id=1\"]'",
        agent=url_discovery_agent,
        tools=[URLDiscoveryTool()] # Hoặc agent đã có tool này
    )

    analyze_task = Task(
        description=(
            "Phân tích danh sách các URL (đã được cung cấp dưới dạng JSON string từ output của task trước) để tìm lỗ hổng SQL Injection và XSS. "
            f"Sử dụng Vulnerability Analysis Tool với các cài đặt: skip_sqli={skip_sqli}, skip_xss={skip_xss}, và num_threads={num_threads}. "
            "Output của tool này sẽ là một JSON string chứa danh sách các lỗ hổng (findings)."
        ),
        expected_output="Một JSON string đại diện cho một danh sách các dictionary (findings).",
        agent=vulnerability_analysis_agent,
        context=[discover_task], # Output của discover_task là input cho description này (và tool của analyze_task)
        tools=[VulnerabilityAnalysisTool()]
    )

    generate_summary_task = Task(
        description=(
            "Dựa trên danh sách các lỗ hổng đã được phát hiện (dưới dạng JSON string từ output của task trước), "
            "hãy tạo một bản tóm tắt báo cáo bảo mật bằng ngôn ngữ tự nhiên (Tiếng Việt). "
            "Bản tóm tắt nên bao gồm: đánh giá tổng quan, các lỗ hổng nghiêm trọng nhất (nếu có) và giải thích nguy cơ, "
            "cùng với gợi ý khắc phục chung. Đề cập đến CWE-89 và CWE-79 nếu có lỗi tương ứng. "
            "Đây là dữ liệu JSON string về các lỗ hổng: {context[0]}" # {context[0]} sẽ là output của analyze_task
        ),
        expected_output="Một chuỗi văn bản (string) bằng Tiếng Việt, là bản tóm tắt báo cáo bảo mật.",
        agent=reporting_agent, # Agent này có LLM
        context=[analyze_task],
    )
    return [discover_task, analyze_task, generate_summary_task], task_inputs

# --- Hàm tạo và chạy Crew ---
def run_scanning_crew(initial_url, crawl_enabled, max_crawl_urls, skip_sqli, skip_xss, num_threads=10):
    if not initial_url:
        return {"error": "URL ban đầu không được cung cấp."}

    tasks, crew_inputs = create_tasks_for_crew(initial_url, crawl_enabled, max_crawl_urls, skip_sqli, skip_xss, num_threads)
    
    scanning_crew = Crew(
        agents=[url_discovery_agent, vulnerability_analysis_agent, reporting_agent],
        tasks=tasks,
        process=Process.sequential, # Chạy tuần tự
        verbose=True,
        llm=deepseek_llm_instance, # Sử dụng LLM của CrewAI
        # memory=True # Bật nếu muốn agent nhớ các tương tác trước đó
    )

    print(f"\n[CrewAI Kickoff] Bắt đầu với inputs: {crew_inputs}")
    final_result_summary = None
    discovered_urls_list = []
    vulnerability_findings_list = []

    try:
        # Kickoff the crew
        # Kết quả của kickoff là output của task cuối cùng
        final_result_summary = scanning_crew.kickoff(inputs=crew_inputs)
        
        # Lấy output từ các task trung gian
        raw_discover_output = '[]' # Mặc định
        if tasks[0].output:
            if hasattr(tasks[0].output, 'exported_output') and tasks[0].output.exported_output:
                raw_discover_output = tasks[0].output.exported_output
            elif hasattr(tasks[0].output, 'result') and tasks[0].output.result:
                raw_discover_output = tasks[0].output.result
            else: # Fallback nếu không có cả hai
                raw_discover_output = str(tasks[0].output) if str(tasks[0].output).strip() else '[]'


        raw_analyze_output = '[]' # Mặc định
        if tasks[1].output:
            if hasattr(tasks[1].output, 'exported_output') and tasks[1].output.exported_output:
                raw_analyze_output = tasks[1].output.exported_output
            elif hasattr(tasks[1].output, 'result') and tasks[1].output.result:
                raw_analyze_output = tasks[1].output.result
            else: # Fallback
                raw_analyze_output = str(tasks[1].output) if str(tasks[1].output).strip() else '[]'

        
        try:
            discovered_urls_list = json.loads(raw_discover_output)
            if not isinstance(discovered_urls_list, list): discovered_urls_list = [str(raw_discover_output)] # fallback
        except (json.JSONDecodeError, TypeError):
            print(f"[CrewAI Warning] Không thể parse output của discover_task: {raw_discover_output}")
            discovered_urls_list = [str(raw_discover_output)] if raw_discover_output else []


        try:
            vulnerability_findings_list = json.loads(raw_analyze_output)
            if not isinstance(vulnerability_findings_list, list): vulnerability_findings_list = [str(raw_analyze_output)] # fallback
        except (json.JSONDecodeError, TypeError):
            print(f"[CrewAI Warning] Không thể parse output của analyze_task: {raw_analyze_output}")
            vulnerability_findings_list = [str(raw_analyze_output)] if raw_analyze_output else []
            # Nếu LLM agent cần list of dicts, lỗi parse này sẽ ảnh hưởng đến nó
            # Có thể cần truyền raw_analyze_output cho LLM agent nếu parse lỗi

        return {
            "initial_url": initial_url,
            "discovered_urls": discovered_urls_list,
            "findings": vulnerability_findings_list,
            "summary_by_llm": final_result_summary, # Đây là output của generate_summary_task
            "crew_usage_metrics": scanning_crew.usage_metrics 
        }
    except Exception as e:
        print(f"[CrewAI Error] Lỗi trong quá trình kickoff crew: {e}")
        import traceback
        traceback.print_exc()
        # Cập nhật cách lấy output ở đây nếu task đã chạy một phần
        discover_out_on_error = '[]'
        if tasks and len(tasks) > 0 and tasks[0].output:
            if hasattr(tasks[0].output, 'exported_output') and tasks[0].output.exported_output:
                discover_out_on_error = tasks[0].output.exported_output
            elif hasattr(tasks[0].output, 'result') and tasks[0].output.result:
                discover_out_on_error = tasks[0].output.result
            else:
                discover_out_on_error = str(tasks[0].output) if str(tasks[0].output).strip() else '[]'

        analyze_out_on_error = '[]'
        if tasks and len(tasks) > 1 and tasks[1].output:
            if hasattr(tasks[1].output, 'exported_output') and tasks[1].output.exported_output:
                analyze_out_on_error = tasks[1].output.exported_output
            elif hasattr(tasks[1].output, 'result') and tasks[1].output.result:
                analyze_out_on_error = tasks[1].output.result
            else:
                analyze_out_on_error = str(tasks[1].output) if str(tasks[1].output).strip() else '[]'

        return {
            "error": f"Lỗi khi chạy scanning crew: {str(e)}",
            "initial_url": initial_url,
            "discovered_urls": discover_out_on_error, # Trả về output đã lấy được (có thể là string)
            "findings": analyze_out_on_error,
            "summary_by_llm": "Không thể tạo tóm tắt do lỗi."
        }

# Test độc lập (bỏ comment và sửa WebScannerService nếu cần để chạy)
# if __name__ == '__main__':
#     print("Chạy thử nghiệm vulnerability_scanner_crew.py...")
#     test_url = "http://testphp.vulnweb.com/" 
#     results = run_scanning_crew(
#         initial_url=test_url, crawl_enabled=True, max_crawl_urls=2,
#         skip_sqli=False, skip_xss=False, num_threads=5
#     )
#     print("\n--- KẾT QUẢ TỪ CREW ---")
#     print(json.dumps(results, indent=4, ensure_ascii=False))